@model ePayRoll.DataAccess.Models.Employee

<h2>@(Model.Id == 0 ? "Add Employee" : "Edit Employee")</h2>


@if (!ViewData.ModelState.IsValid || TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @TempData["ErrorMessage"]
    </div>
}
<form id="employeeForm" method="post" action="@Url.Action("Save")" class="form-group">
    @Html.HiddenFor(m => m.Id)

    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Full Name:</label>
        </div>
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", required = "required" })
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Date of Birth:</label>
        </div>
        <div class="col-md-9">
            <input type="date" class="form-control" name="DOB" value="@(Model.DOB != DateTime.MinValue ? Model.DOB.ToString("yyyy-MM-dd") : "")" required />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Gender:</label>
        </div>
        <div class="col-md-9">
            @Html.DropDownListFor(m => m.Gender, new SelectList(new[]
            {
                new { Value = "Male", Text = "Male" },
                new { Value = "Female", Text = "Female" }
            }, "Value", "Text"), "Select Gender", new { @class = "form-control", required = "required" })
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Join Date:</label>
        </div>
        <div class="col-md-9">
            <input type="date" class="form-control" name="JoinDate" value="@(Model.JoinDate != DateTime.MinValue ? Model.JoinDate.ToString("yyyy-MM-dd") : "")" required />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Resign Date:</label>
        </div>
        <div class="col-md-9">
            <input type="date" class="form-control" name="ResignDate" value="@(Model.ResignDate.HasValue ? Model.ResignDate.Value.ToString("yyyy-MM-dd") : "")" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Basic Salary:</label>
        </div>
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.BasicSalary, new { @class = "form-control", type = "number", step = "0.01", required = "required" })
        </div>
    </div>

    <div class="d-flex">
        <button type="submit" class="btn btn-success me-2">Save</button>

        @if (Model.Id != 0)
        {
            <button type="button" class="btn btn-danger" id="deleteBtn">Delete</button>
        }
    </div>
    <!--  Allowances Section -->
    <h3>Allowances</h3>
    <table class="table" id="allowanceTable">
        <thead>
            <tr>
                <th>Type</th>
                <th>Amount</th>
                <th>Month-Year</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody id="allowanceBody">
            @if (Model.Allowances != null && Model.Allowances.Any())
            {
                for (int i = 0; i < Model.Allowances.Count; i++)
                {
                    <tr>
                        <td><input type="text" name="Allowances[@i].Type" value="@Model.Allowances[i].Type" class="form-control" /></td>
                        <td><input type="number" name="Allowances[@i].Amount" value="@Model.Allowances[i].Amount" class="form-control" step="0.01" /></td>
                        <td><input type="month" name="Allowances[@i].MonthYear" value="@Model.Allowances[i].MonthYear.ToString("yyyy-MM")" class="form-control" /></td>
                        <td><button type="button" class="btn btn-danger removeAllowance">Delete</button></td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <button type="button" class="btn btn-primary" id="addAllowance">Add Allowance</button>

    <!--  Deductions Section -->
    <h3>Deductions</h3>
    <table class="table" id="deductionTable">
        <thead>
            <tr>
                <th>Type</th>
                <th>Amount</th>
                <th>Month-Year</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody id="deductionBody">
            @if (Model.Deductions != null && Model.Deductions.Any())
            {
                for (int i = 0; i < Model.Deductions.Count; i++)
                {
                    <tr>
                        <td><input type="text" name="Deductions[@i].Type" value="@Model.Deductions[i].Type" class="form-control" /></td>
                        <td><input type="number" name="Deductions[@i].Amount" value="@Model.Deductions[i].Amount" class="form-control" step="0.01" /></td>
                        <td><input type="month" name="Deductions[@i].MonthYear" value="@Model.Deductions[i].MonthYear.ToString("yyyy-MM")" class="form-control" /></td>
                        <td><button type="button" class="btn btn-danger removeDeduction">Delete</button></td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <button type="button" class="btn btn-primary" id="addDeduction">Add Deduction</button>


</form>

@section Scripts {
    <script>
        $(document).ready(function () {

            let allowanceIndex = $("#allowanceBody tr").length;
            let deductionIndex = $("#deductionBody tr").length;

            // Add Allowance
            $("#addAllowance").click(function () {
                let newRow = `
                    <tr>
                        <td><input type="text" name="Allowances[${allowanceIndex}].Type" class="form-control" /></td>
                        <td><input type="number" name="Allowances[${allowanceIndex}].Amount" class="form-control" step="0.01" /></td>
                        <td><input type="month" name="Allowances[${allowanceIndex}].MonthYear" class="form-control" /></td>
                        <td><button type="button" class="btn btn-danger removeAllowance">Delete</button></td>
                    </tr>`;
                $("#allowanceBody").append(newRow);
                allowanceIndex++;
            });

            // Remove Allowance
            $(document).on("click", ".removeAllowance", function () {
                $(this).closest("tr").remove();
            });

            // Add Deduction
            $("#addDeduction").click(function () {
                let newRow = `
                    <tr>
                        <td><input type="text" name="Deductions[${deductionIndex}].Type" class="form-control" /></td>
                        <td><input type="number" name="Deductions[${deductionIndex}].Amount" class="form-control" step="0.01" /></td>
                        <td><input type="month" name="Deductions[${deductionIndex}].MonthYear" class="form-control" /></td>
                        <td><button type="button" class="btn btn-danger removeDeduction">Delete</button></td>
                    </tr>`;
                $("#deductionBody").append(newRow);
                deductionIndex++;
            });

            // Remove Deduction
            $(document).on("click", ".removeDeduction", function () {
                $(this).closest("tr").remove();
            });

            // Delete Employee
            $("#deleteBtn").click(function () {
                if (confirm("Are you sure you want to delete this employee?")) {
                    window.location.href = "@Url.Action("Delete")?id=" + @Model.Id;
                }
            });

        });
    </script>
}
